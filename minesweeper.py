from random import randint


class Cell:
    """–ö–ª–∞—Å—Å —è—á–µ–π–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""

    def __init__(self, mines_arond=0, is_mine=False):
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏.
        self.mines_arond = mines_arond
        # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –º–∏–Ω–æ–π.
        self.is_mine = is_mine
        # –û—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —è—á–µ–π–∫–∞.
        self.is_open = False


class MineField:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
    closed = 'üîí '
    mine = 'üí£'

    def __init__(self, size, mines):
        self._size = size
        self._mines = mines
        self.field = [
            [Cell() for _ in range(self._size)] for _ in range(self._size)
        ]
        self.initialize()

    def initialize(self):
        """–ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        # –í–≤–æ–¥–∏–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å.
        mines_left = self._mines
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω—ã –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é –≤ —Ü–∏–∫–ª–µ.
        while mines_left > 0:
            x = randint(0, self._size - 1)
            y = randint(0, self._size - 1)
            # –ï—Å–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–Ω–¥–æ–º–Ω–æ–π —è—á–µ–π–∫–µ —É–∂–µ –µ—Å—Ç—å –º–∏–Ω–∞, —Ç–æ
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä—è–¥ –∏ –∫–æ–ª–æ–Ω–∫—É –∑–∞–Ω–æ–≤–æ.
            if self.field[x][y].is_mine:
                continue
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, —Ç–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ
            # –º–µ–Ω—è–µ–º —Ñ–ª–∞–≥ is_mine –Ω–∞ True.
            self.field[x][y].is_mine = True
            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–∏–Ω –Ω–∞ 1.
            mines_left -= 1

        # –ö–æ—Ä—Ç–µ–∂ –∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏.
        indx = (
            (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0),
            (1, 1)
        )
        # –î–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–æ–π, —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        # –º–∏–Ω –≤–æ–∫—Ä—É–≥ –Ω–µ–µ.
        for x in range(self._size):
            for y in range(self._size):
                if not self.field[x][y].is_mine:
                    mine_count = sum(
                        (
                            self.field[x+i][y+j].is_mine for i, j in indx
                            if 0 <= x + i < self._size and (
                                    0 <= y + j < self._size
                                    )
                        )
                    )
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤ –∞—Ç—Ä–∏–±—É—Ç mines_arond.
                    self.field[x][y].mines_arond = mine_count

    def show_top_bar(self):
        """–ú–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞ —Ü–∏—Ñ—Ä."""
        left_margin = 5
        one_column_size = 4
        top_numbers = [i + 1 for i in range(self._size)]
        for num in top_numbers:
            if num == 1:
                print(f'{' ' * left_margin}{num}   ', end='')
            elif num < 10:
                print(f'{num}   ', end='')
            else:
                print(f'{num}  ', end='')
        print()
        print(f'{' ' * (left_margin - 1)}{'_' * self._size * one_column_size}')

    def show(self):
        """–ú–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è."""
        self.show_top_bar()
        for i, row in enumerate(self.field):
            print(
                  f' {i + 1} |' if i < 9 else f'{i + 1} |',
                  *map(
                      lambda x: f'{self.closed}' if not x.is_open
                      else f'{self.mine}' if x.is_mine else
                      f' {x.mines_arond} ', row
                    )
                )

    def show_all(self):
        """–ú–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —è—á–µ–µ–∫ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."""
        self.show_top_bar()
        for i, row in enumerate(self.field):
            print(
                  f' {i + 1} |' if i < 9 else f'{i + 1} |',
                  *map(
                      lambda x: f'{self.mine} ' if x.is_mine else
                      f' {x.mines_arond} ', row
                    )
                )

    def make_turns(self):
        """–ú–µ—Ç–æ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–æ–≤ –∏–≥—Ä–æ–∫–æ–º."""
        while True:
            try:
                x = int(input('Please enter the row number: ')) - 1
                y = int(input('Please enter the column number: ')) - 1
                if self.field[x][y].is_open:
                    print('This cell is already open. Choose another one.\n')
                    continue
            except ValueError or IndexError:
                print(f'Row and column numbers must be 1 to {self._size}.\n')
                continue
            print()
            self.field[x][y].is_open = True
            if self.field[x][y].is_mine:
                self.show_all()
                print("It's a mine! The game is over!")
                break
            self.show()


def main():
    size = 10
    mines = 12
    field = MineField(size, mines)
    field.show()
    field.make_turns()
    input('Press ENTER to exit.')


if __name__ == '__main__':
    main()
